import gmpy2
N1=26837801359278183335321328732128849659398646595431137422719550868858004929052046106667778548745533953870220472764947723327246880059540741448508807489772963048912228366096526084588967391796623919054187610621706693802558855762754637841846092184877558496642353117083915037460483831576625609313628241614630180956262797533215716531911218605355889304844401834638871702801802937823594930367131626680788857687304183187261030117447436806642882736787623402302781195723952066429649144261728543032987805939707346166557722512535929414992833712923770275308559250320195577259949299355630954724455822138440253034223307096269714153587714429501275316520274934759812980855279462545766058661254487234848794675246840362140394834873690377853949675165847022216765871047232238684526647664133735916108569
c1=14109170726792482005539208324112375790307702355238703977674831885230160836595235132137875430211215505371468839577891629967731481687231588805793423616061989080728671111490768404257166095092953853775552384135607061504242982514408365329928633707726400068176520028296376038087678259340882426254226455530364293135586266918597805344526125023310393697074410128971801440266839644674112625137677348702081801112769502190356888349602383066467686439317535263124747557314736113763495237122913424028426701073031388753246814374819002665097158475620712717391520789530839425958010305988883549882290176773518639193693241999094368167484546609103349590111968221850305537874988231686185912694457972603056694086968972688678643267827151496273795259871855356004769915076029685744905793886609434388577323
E1=104674541270195092778884435612355530111226428791180397599353483792558299691603178245701874779927646990185742222366317707175200380769035930258160981437874680614850101918989573374888653426551853958145591007865633633027418277916921134848583238860416269451920999797987871997411620645827673807288910420729539220941
N2=26837801359278183335321328732128849659398646595431137422719550868858004929052046106667778548745533953870220472764947723327246880059540741448508807489773004983308335081088160301584173271713049848231629589621041331749669010338997591843077395110532868875351505251096475492352650830449208105664101140271044337589249781430942270358121152319467320809399319341573585395654738710068640711796774289120918014249088635836479311686563906149243020520612716711411784595192556012893389008426095187596380941785217691766956592417642570521491000250173834480175949527497041462918474994806856098311763050782122538645723760953015113119436642489616125522088986238564487623650874504000185463210409859497308149957966970685805276671583835442106085835295073512509877546873666994266346578385577980915683607
c2=18674889200803274725775236815664980787759418905572866778321269117994874975116864770466413630318331443079446689905644766759989889382572391871424773586536924168507399006434338799258030042800688989911977122257576124304451666083347584083445282863339336561837503393851249524842213695692668732808814114888112273863657328019470394248366959326941368758799583295040871801687936456412056060680509343835980447314173482719574008780184626429479591165509380611806340298881450051184272383876437929575734688717650089684007558429318261320379248928357804959154128259951127141804889888575993854826240382152617180930682951609841428796639147632381657827489854088537096375202398113956309946366621559022527839361382517029707579181204127973057804561016229264720569166183694851337742165939464511183532969
E2=104674541270195092778884435612355530111226428791180397599353483792558299691603178245701874779927646990185742222366317707175200380769035930258160981437874680614850101918989573374888653426551853958145591007865633633027418277916921134848583238860416269451920999797987871997411620645827673807288910420729539220953
def continuedFra(x, y):
    cF = []
    while y:
        cF += [x // y]
        x, y = y, x % y
    return cF
def Simplify(ctnf):
    numerator = 0
    denominator = 1
    for x in ctnf[::-1]:
        numerator, denominator = denominator, x * denominator + numerator
    return (numerator, denominator)
def getit(c):
    cf=[]
    for i in range(1,len(c)):
        cf.append(Simplify(c[:i]))
    return cf
#求渐进分数
def wienerAttack(e, n):
    cf=continuedFra(e,n)
    for (p2,p1) in getit(cf):
        if p1 == 0:
            continue
        if N1%p1==0 and p1!=1:
            return p1
    print('not find!')
q1=wienerAttack(N1,N2)
#p1=11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947
print(q1)
p1=gmpy2.iroot(N1//q1,2)[0]
p2=gmpy2.next_prime(p1)
q2=gmpy2.next_prime(q1)
phi1=p1*(p1-1)*(q1-1)
phi2=p2*(p2-1)*(q2-1)
d1=gmpy2.invert(E1,phi1)
d2=gmpy2.invert(E2,phi2)
from Crypto.Util import number
m1=number.long_to_bytes(gmpy2.powmod(c1,d1,N1))
m2=number.long_to_bytes(gmpy2.powmod(c2,d2,N2))
print((m1+m2))

# flag{c299ffbe-464f-84f5-d4bc-685a43f675f1}